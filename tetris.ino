#include "SSD1306_minimal.h"
#include <avr/pgmspace.h>

#define ColCount 32
#define RowCount 16 

SSD1306_Mini oled;
uint8_t num_pza;
static const byte button[] PROGMEM={
 
  0x00, 0x00, 0xC0, 0xB8, 0x4A, 0xB5, 0xD5, 0x7A, 0xAD, 0xFA, 0xCF, 0xFD, 0xEE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB, 0xBE, 0xF5, 0xAB, 0xFF, 0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0x6F, 0xFF, 0xBD, 0xF7, 0xEF, 0xBB, 0xEF, 0xDB, 0xBF, 0xEE, 0x7F, 0xDD, 0x7A, 0xF5, 0xE9, 0xD6, 0xEC, 0xA8, 0x50, 0xB0, 0x40, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x80, 0xBA, 0xE5, 0xFA, 0xDF, 0xF5, 0x7A, 0xDF, 0xF6, 0x5B, 0xEF, 0xBD, 0xEF, 0x7F, 0xFF, 0xFF, 0xDF, 0xFF, 0xFF, 0x7F, 0x5F, 0x1F, 0x57, 0x07, 0x15, 0x07, 0x01, 0x07, 0x01, 0x06, 0x0B, 0x07, 0x0F, 0x17, 0x0F, 0x2F, 0x5F, 0x3F, 0xDF, 0xBF, 0xFD, 0xB7, 0xFD, 0xEE, 0xFF, 0xBD, 0xF6, 0xFB, 0xEF, 0xFE, 0xBB, 0xFF, 0xF5, 0xDF, 0xAE, 0xFF, 0xBB, 0xEF, 0xFB, 0xDE, 0x75, 0xDE, 0x75, 0xDB, 0xB4, 0xEC, 0x50, 0xA8, 0x50, 0xA0, 0x40, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  
0x00, 0xBE, 0xFF, 0xFE, 0xFF, 0xDB, 0xFF, 0xFA, 0xFF, 0xFF, 0x7F, 0xD7, 0x3D, 0xEB, 0x5E, 0xE3, 0x3C, 0x17, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x02, 0x00, 0x0B, 0x05, 0x2A, 0x9F, 0x37, 0xAE, 0x7B, 0xDF, 0xFF, 0xFF, 0xFE, 0xFB, 0xDF, 0xFF, 0xFE, 0xFB, 0xFE, 0xFB, 0xEF, 0xFF, 0xBD, 0xFB, 0xFF, 0xFE, 0xDF, 0xF5, 0xFF, 0xF5, 0xEE, 0xFD, 0xD6, 0xFA, 0xF5, 0xF5, 0xEA, 0xE8, 0xD4, 0xD4, 0xA8, 0xD0, 0xA8, 0x50, 0xE0, 0x50, 0xA0, 0xA0, 0xE0, 0xA0, 0xA0, 0xC0, 0x60, 0x80, 0xC0, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x02, 0xBF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xD5, 0xAA, 0xFF, 0x85, 0xDA, 0xC5, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x08, 0xAC, 0x26, 0x52, 0x09, 0x14, 0x08, 0x3E, 0x94, 0x86, 0x64, 0x0C, 0x0C, 0x0A, 0x14, 0x03, 0x0C, 0x12, 0x43, 0x0F, 0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0x7F, 0xBF, 0xBE, 0x5F, 0x3E, 0x1F, 0x5E, 0x1F, 0x1D, 0x3E, 0x17, 0x1E, 0x16, 0x1B, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD, 0xFF, 0xAE, 0x5C, 0x1E, 0x36, 0x27, 0x46, 0x4B, 0x2F, 0x02, 0x25, 0x10, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0xA2, 0x09, 0x54, 0x00, 0xAB, 0x2F, 0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDB, 0xEF, 0xFF, 0xFF, 0x7F, 0xDF, 0x5F, 0xBF, 0x5F, 0x3F, 0x57, 0x4F, 0x5F, 0x0E, 0x1F, 0x1F, 0x2D, 0x1E, 0x56, 0x1C, 0x2C, 0x54, 0x08, 0x28, 0x08, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFD, 0xF0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x24, 0x00, 0x2A, 0x00, 0x00, 0x08, 0x01, 0x00, 0x00, 0x02, 0x40, 0x0A, 0x80, 0x55, 0x00, 0xAA, 0xA0, 0xFA, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x5F, 0x97, 0xF5, 0x6F, 0xBF, 0x57, 0x3F, 0xAF, 0x1D, 0x75, 0x16, 0xA8, 0x42, 0x14, 0x40, 0x08, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xF8, 0xF0, 0xE0, 0xC0, 0xC0, 0x80, 0x00, 0x00, 0x20, 0x20, 0xA0, 0x32, 0xA0, 0x39, 0xA8, 0x98, 0x5C, 0xD8, 0x4C, 0xA0, 0x56, 0x00, 0x2A, 0x01, 0xA8, 0x02, 0xA8, 0xE4, 0x69, 0xB4, 0x2E, 0xAF, 0x5F, 0xBF, 0xBF, 0x7F, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xAF, 0x7B, 0x0F, 0xAF, 0x1A, 0xB5, 0x62, 0xC9, 0x84, 0x21, 0x04, 0x11, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xFC, 0xF8, 0xF8, 0xF1, 0xE0, 0xF2, 0xE1, 0xE8, 0x62, 0x68, 0x31, 0xA8, 0xE8, 0xBA, 0xEC, 0xD6, 0x6F, 0xAB, 0xB5, 0xAA, 0xF5, 0xAA, 0x55, 0xAA, 0x6A, 0xDA, 0xA5, 0x5A, 0xED, 0xF6, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x5C, 0x01, 0xAA, 0x04, 0x40, 0x12, 0x00, 0x04, 0x80, 0x11, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
};

/*
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x80, 0x80, 0x80, 0xC0, 0xC0, 0xC0, 0xC0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 
0xE0, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xFE, 0xFE, 0x0F, 0x07, 0x07, 
0x03, 0x03, 0x03, 0x03, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 
0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xE0, 0xF8, 0xF8, 0x7C, 0xFC, 0xFC, 0xFF, 0x1F, 0x1F, 0x1C, 0x1C, 0x1C, 
0x1C, 0x1C, 0x38, 0xF8, 0xF0, 0xE0, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 
0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0xE0, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 
0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x07, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0xC0, 0xFF, 0xFF, 0x7F, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x80, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 
0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x07, 0x1F, 0x1F, 0x1E, 0x1F, 0x3F, 0xFF, 0xF8, 0xF8, 0x18, 0x18, 0x18, 
0x18, 0x18, 0x1C, 0x1F, 0x0F, 0x07, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 
0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x7F, 0x7F, 0xF0, 0xE0, 0xE0, 
0xC0, 0xC0, 0xC0, 0xC0, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 
0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x01, 0x01, 0x01, 0x03, 0x03, 0x03, 0x03, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 
0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};
/*  
  /*
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x80, 0x80, 0x80, 0xC0, 0xC0, 0xC0, 0xC0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 
0xE0, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xFE, 0xFE, 0x0F, 0x07, 0x07, 
0x03, 0x03, 0x03, 0x03, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 
0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xE0, 0xC0, 0x80, 0x80, 
0x00, 0x00, 0x00, 0x00, 0xE0, 0xF8, 0xF8, 0x7C, 0xFC, 0xFC, 0xFF, 0x1F, 0x1F, 0x1C, 0x1C, 0x1C, 
0x1C, 0x1C, 0x38, 0xF8, 0xF0, 0xE0, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 
0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x81, 0x83, 0x83, 0x03, 
0x00, 0x00, 0xE0, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 
0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x81, 0xC1, 0xC1, 0xC0, 
0x00, 0x00, 0x07, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0xC0, 0xFF, 0xFF, 0x7F, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x80, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 
0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x07, 0x03, 0x01, 0x01, 
0x00, 0x00, 0x00, 0x00, 0x07, 0x1F, 0x1F, 0x1E, 0x1F, 0x3F, 0xFF, 0xF8, 0xF8, 0x18, 0x18, 0x18, 
0x18, 0x18, 0x1C, 0x1F, 0x0F, 0x07, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 
0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x7F, 0x7F, 0xF0, 0xE0, 0xE0, 
0xC0, 0xC0, 0xC0, 0xC0, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 
0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x01, 0x01, 0x01, 0x03, 0x03, 0x03, 0x03, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 
0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,*/
/*};

static const byte button2[] PROGMEM={
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x80, 0x80, 0x80, 0xC0, 0xC0, 0xC0, 0xC0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 
0xE0, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xFE, 0xFE, 0x0F, 0x07, 0x07, 
0x03, 0x03, 0x03, 0x03, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 
0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xE0, 0xF8, 0xF8, 0x7C, 0xFC, 0xFC, 0xFF, 0x1F, 0x1F, 0x1C, 0x1C, 0x1C, 
0x1C, 0x1C, 0x38, 0xF8, 0xF0, 0xE0, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 
0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0xE0, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 
0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x07, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0xC0, 0xFF, 0xFF, 0x7F, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x80, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 
0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x07, 0x1F, 0x1F, 0x1E, 0x1F, 0x3F, 0xFF, 0xF8, 0xF8, 0x18, 0x18, 0x18, 
0x18, 0x18, 0x1C, 0x1F, 0x0F, 0x07, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 
0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x7F, 0x7F, 0xF0, 0xE0, 0xE0, 
0xC0, 0xC0, 0xC0, 0xC0, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 
0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x01, 0x01, 0x01, 0x03, 0x03, 0x03, 0x03, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 
0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};*/

static const byte font[] PROGMEM = {
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // U+0020 (space)
     0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00,   // U+002D (-)
     0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x00,   // U+002E (.)
     0x60, 0x30, 0x18, 0x0C, 0x06, 0x03, 0x01, 0x00,   // U+002F (/)
     0x3E, 0x63, 0x73, 0x7B, 0x6F, 0x67, 0x3E, 0x00,   // U+0030 (0)48
     0x0C, 0x0E, 0x0C, 0x0C, 0x0C, 0x0C, 0x3F, 0x00,   // U+0031 (1)
     0x1E, 0x33, 0x30, 0x1C, 0x06, 0x33, 0x3F, 0x00,   // U+0032 (2)
     0x1E, 0x33, 0x30, 0x1C, 0x30, 0x33, 0x1E, 0x00,   // U+0033 (3)
     0x38, 0x3C, 0x36, 0x33, 0x7F, 0x30, 0x78, 0x00,   // U+0034 (4)
     0x3F, 0x03, 0x1F, 0x30, 0x30, 0x33, 0x1E, 0x00,   // U+0035 (5)
     0x1C, 0x06, 0x03, 0x1F, 0x33, 0x33, 0x1E, 0x00,   // U+0036 (6)
     0x3F, 0x33, 0x30, 0x18, 0x0C, 0x0C, 0x0C, 0x00,   // U+0037 (7)
     0x1E, 0x33, 0x33, 0x1E, 0x33, 0x33, 0x1E, 0x00,   // U+0038 (8)
     0x1E, 0x33, 0x33, 0x3E, 0x30, 0x18, 0x0E, 0x00,   // U+0039 (9)
     0x0C, 0x1E, 0x33, 0x33, 0x3F, 0x33, 0x33, 0x00,   // U+0041 (A)65
     0x3F, 0x66, 0x66, 0x3E, 0x66, 0x66, 0x3F, 0x00,   // U+0042 (B)
     0x3C, 0x66, 0x03, 0x03, 0x03, 0x66, 0x3C, 0x00,   // U+0043 (C)
     0x1F, 0x36, 0x66, 0x66, 0x66, 0x36, 0x1F, 0x00,   // U+0044 (D)
     0x7F, 0x46, 0x16, 0x1E, 0x16, 0x46, 0x7F, 0x00,   // U+0045 (E)
     0x7F, 0x46, 0x16, 0x1E, 0x16, 0x06, 0x0F, 0x00,   // U+0046 (F)
     0x3C, 0x66, 0x03, 0x03, 0x73, 0x66, 0x7C, 0x00,   // U+0047 (G)
     0x33, 0x33, 0x33, 0x3F, 0x33, 0x33, 0x33, 0x00,   // U+0048 (H)
     0x1E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00,   // U+0049 (I)
     0x78, 0x30, 0x30, 0x30, 0x33, 0x33, 0x1E, 0x00,   // U+004A (J)
     0x67, 0x66, 0x36, 0x1E, 0x36, 0x66, 0x67, 0x00,   // U+004B (K)
     0x0F, 0x06, 0x06, 0x06, 0x46, 0x66, 0x7F, 0x00,   // U+004C (L)
     0x63, 0x77, 0x7F, 0x7F, 0x6B, 0x63, 0x63, 0x00,   // U+004D (M)
     0x63, 0x67, 0x6F, 0x7B, 0x73, 0x63, 0x63, 0x00,   // U+004E (N)
     0x1C, 0x36, 0x63, 0x63, 0x63, 0x36, 0x1C, 0x00,   // U+004F (O)
     0x3F, 0x66, 0x66, 0x3E, 0x06, 0x06, 0x0F, 0x00,   // U+0050 (P)
     0x1E, 0x33, 0x33, 0x33, 0x3B, 0x1E, 0x38, 0x00,   // U+0051 (Q)
     0x3F, 0x66, 0x66, 0x3E, 0x36, 0x66, 0x67, 0x00,   // U+0052 (R)
     0x1E, 0x33, 0x07, 0x0E, 0x38, 0x33, 0x1E, 0x00,   // U+0053 (S)
     0x3F, 0x2D, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00,   // U+0054 (T)
     0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x3F, 0x00,   // U+0055 (U)
     0x33, 0x33, 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x00,   // U+0056 (V)
     0x63, 0x63, 0x63, 0x6B, 0x7F, 0x77, 0x63, 0x00,   // U+0057 (W)
     0x63, 0x63, 0x36, 0x1C, 0x1C, 0x36, 0x63, 0x00,   // U+0058 (X)
     0x33, 0x33, 0x33, 0x1E, 0x0C, 0x0C, 0x1E, 0x00,   // U+0059 (Y)
     0x7F, 0x63, 0x31, 0x18, 0x4C, 0x66, 0x7F, 0x00,   // U+005A (Z)
     0x00, 0x00, 0x00, 0x3C, 0x3C, 0x0F, 0x0F, 0x00,    // U+005A (Z)
     0x00, 0x00, 0x00, 0x0F, 0x0F, 0x3C, 0x3C, 0x00,    // U+005A (Z)
     0x00, 0x00, 0x00, 0x0F, 0x0F, 0x0F, 0x0F, 0x00,   // U+005A (Z)
     0x00, 0x00, 0x00, 0x3F, 0x3F, 0x0C, 0x0C, 0x00,    // U+005A (Z)
     0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C,   // U+005A (Z)
     0x00, 0x0C, 0x0C, 0x0C, 0x0C, 0x0F, 0x0F, 0x00,    // U+005A (Z)
     0x00, 0x03, 0x03, 0x03, 0x03, 0x0F, 0x0F, 0x00,    // U+005A (Z)
};
/*
int Z[]={99,36};
int S[]={54,561};
int O=51;
int T[]={114,305,39,562};
int I[]={4363,240};
int L[]={1094,116,1570,23};
int Li={550,71,1604,113};
*/

uint16_t pz[7][4]={
{99, 306},
{54, 561},
{51},
{114, 305, 39, 562},
{8738, 240},
{1094, 116, 1570, 23},
{550, 71, 1604, 113}};

int8_t numero;
int8_t indice;
uint8_t M[17];
uint8_t pieza[4];
int8_t x, y;
uint8_t next_number;

unsigned char getFlash( const unsigned char * mem, unsigned int idx  )
{
  unsigned char data= pgm_read_byte( &(mem[idx]) );
  return data;
}

unsigned char SwapBit(unsigned char Byte)
 {
 unsigned char etyB=0;
 for (unsigned char Bit=0001; Byte; Byte<<=1, Bit<<=1)
  if (Byte&0200)
   etyB|=Bit;
 return etyB;
 }
 
void printChar( char ch )
{
    char data[8];
    unsigned char i;
    if(ch>64)
      i = ch-51;  
    else
     i = ch-44;
    
    data[0]= SwapBit(getFlash(font, i*8 ));
    data[1]= SwapBit(getFlash(font, i*8 + 1));
    data[2]= SwapBit(getFlash(font, i*8 + 2));
    data[3]= SwapBit(getFlash(font, i*8 + 3));
    data[4]= SwapBit(getFlash(font, i*8 + 4));
    data[5]= SwapBit(getFlash(font, i*8 + 5));
    data[6]= SwapBit(getFlash(font, i*8 + 6));
    data[7]= SwapBit(getFlash(font, i*8 + 7));    
    
    Wire.beginTransmission(SlaveAddress);
    Wire.send(GOFi2cOLED_Data_Mode);            // data mode
    Wire.send( 0x00 );
    Wire.send( data[0] );
    Wire.send( data[1] );
    Wire.send( data[2] );
    Wire.send( data[3] );
    Wire.send( data[4] );
    Wire.send( data[5] );
    Wire.send( data[6] );
    Wire.send( data[7] );
    Wire.send( 0x00 );  
    Wire.endTransmission();
}

void printString( char * pText,char x,char y ){
  unsigned char i;
  unsigned char len = strlen( pText );
  
  for (i=0;i<len;i++){
    oled.cursorTo(y,7-x-i);
     printChar( pText[i] ); 
  }
  
}


void load(uint8_t numero, uint8_t indice)
{
   uint8_t i; 
   for( i = 0; i < 4; i++)
   {    pieza[i] = 0;
       pieza[i] = (pz[numero][indice] >> (4 * i)) | pieza[i];
      pieza[i] &= 15;
   } 
}

uint8_t setrot(int8_t xx,uint8_t y)
{ 
  int8_t i,j;
  uint8_t renglon=0;
  renglon = pieza[0]|pieza[1]|pieza[2]|pieza[3];
  if(xx<0)
  {
    for( i = 0; i > xx; i--)
    { 
      if((renglon%2)==1){ return 0;}
      renglon  >>= 1;
      pieza[0] >>= 1;
      pieza[1] >>= 1;
      pieza[2] >>= 1;
      pieza[3] >>= 1;
    }
    
    }
   else{ for( i = 0; i < xx; i++)
    { 
      if(renglon >= 128){ return 0;}
      renglon  <<= 1;
      pieza[0] <<= 1;
      pieza[1] <<= 1;
      pieza[2] <<= 1;
      pieza[3] <<= 1;
    }
   }
  for(i = y, j = 0; j < 4 ; i--, j++)
  {
    if( (M[i] & pieza[j]) != 0 )
      return 0;
  }
  for(i = y,j = 0; i > y-4 ; i--, j++)
      M[i]|=pieza[j];
  return 1;
}


void rotar()
{
  
  if (numero == 2) ;  
  else if( (numero == 0 || numero == 1 || numero == 4) && indice+1 > 1) indice = 0;
  else if( (numero == 3 || numero == 5 || numero == 6) && indice+1 > 3) indice = 0;
  else indice++;
  
  load(numero, indice);
 
  if(!setrot(x,y))
  {
    
    if(indice==0)
    { if (numero == 2) ;  
      else if( (numero == 0 || numero == 1 || numero == 4) ) indice = 1;
      else if( (numero == 3 || numero == 5 || numero == 6) ) indice = 3;
    }
    else
      indice--;
      
    load(numero,indice);
    if(!setrot(x,y))  delay(300);    
  }
   
}

void displayblock(int8_t x ){
  char i = 0;
      
  
  //oled.cursorTo(y, x * 8);
  //oled.cursorTo(7,0);
  int j=0;
 
  Wire.beginTransmission(SlaveAddress);
  Wire.send(GOFi2cOLED_Data_Mode);            // data mode
  //for(i=0;i<8;i++)
    if(x)
      {
      Wire.send( 0x00 );
      Wire.send( 0x7f );
      Wire.send( 0x7f );
      Wire.send( 0x7f );
      Wire.send( 0x7f );
      Wire.send( 0x7f );
      Wire.send( 0x7f );
      Wire.send( 0x7f );}
    else 
      {Wire.send( 0x00 );
      Wire.send( 0x00 );
      Wire.send( 0x00 );
      Wire.send( 0x00 );
      Wire.send( 0x00 );
      Wire.send( 0x00 );
      Wire.send( 0x00 );
      Wire.send( 0x00 );}
         
            
  Wire.endTransmission(); 
  
}


void printM()
{
  


 oled.cursorTo(0,0);
  unsigned char var,x ;
  unsigned char contador, inicio = 128; // 2^(8-1) = 128

  for(char j=0;j<8;j++)
  for(char i=0;i<16;i++)
  {
    var = M[i];
    if(i==0) {oled.cursorTo(8,j);continue;}
       // El contador se desplaza un bit a la derecha cada ciclo
          if( (128>>j) & var) // Si contador AND var == 1
              displayblock(1);
          else
              displayblock(0);
  }



        
    

}


int set(int8_t xx,int8_t y)
{
  uint8_t renglon=0;
  renglon = pieza[0]|pieza[1]|pieza[2]|pieza[3];
  
  if(xx>0)
  {
    for(uint8_t i = 0; i < xx; i++)
    { 
      if(renglon >= 128){return 0;}
      renglon  <<= 1;
      
        if( ((pieza[0] << 1) & M[y])  ) return 0;
        if( ((pieza[1] << 1) & M[y-1])  ) return 0;
        if( ((pieza[2] << 1) & M[y-2])  ) return 0;
        if( ((pieza[3] << 1) & M[y-3])  ) return 0;
      
      pieza[0] <<= 1;
      pieza[1] <<= 1;
      pieza[2] <<= 1;
      pieza[3] <<= 1;
    }
  }else
  {
    for(int8_t i = 0; i > xx; i--)
    { 
      if( (renglon % 2) == 1)return 0;
      renglon  >>= 1;

      if( ((pieza[0] >> 1) & M[y])  ) return 0;
        if( ((pieza[1] >> 1) & M[y-1])  ) return 0;
        if( ((pieza[2] >> 1) & M[y-2])  ) return 0;
        if( ((pieza[3] >> 1) & M[y-3])  ) return 0;

      pieza[0] >>= 1;
      pieza[1] >>= 1;
      pieza[2] >>= 1;
      pieza[3] >>= 1;
    }
  }

  for(int8_t i = y, j = 0; j < 4 ; i--, j++)
  {
    if( (M[i] & pieza[j]) != 0 )
      return 0;
  }
  for(int8_t i = y,j = 0; i > y-4 ; i--, j++)
      M[i]|=pieza[j];
  return 1;
  
}

void unset(int8_t y)
{
  for(int8_t i = y, j = 0 ; i > y-4; i--, j++)
      M[i] ^= pieza[j];
}

int8_t down(){
  if( set(0, y+1)  )
  { 
    y++;
    return 1;
  }
  else
  {
    set(0, y);
    return 0;
  }
}

int8_t left(){
  if( set(1, y) )
  {
    x++;
    return 1;
  }else
  {
    set(0, y);
    return 0;
  }
}

int8_t right(){
  if( set(-1, y) )
  {
    x--;
    return 1;
  }else
  {
    set(0, y);
    return 0;
  }
}

void delete_row()
{
  int8_t yy=y;
  for(int8_t j = yy; j > 0; j--)
    while(M[j] == 255)
      {
        for(int8_t i = j; i > 0; i--)
        {
          M[i]=M[i-1];
          
        } 
        M[0]=0;
      }
}






void die( unsigned char r, unsigned char c ){

  Wire.beginTransmission(SlaveAddress);
    Wire.send(GOFi2cOLED_Data_Mode);            // data mode

    Wire.send( 0xFF );
    Wire.send( 0x81 );
    Wire.send( 0x81 );
    Wire.send( 0xFF );
  Wire.endTransmission();
}

void snake(){
  
  oled.cursorTo(3,63);

  die( 0, 0);
  
}


void setup()
{

  randomSeed(analogRead(3));
  pinMode(3,INPUT);//derecha
  pinMode(4,INPUT);//giro
  pinMode(1,INPUT);//izquierda
  
    oled.init(0x3c);
    oled.clear();
}

void  drawImage( const unsigned char * img, unsigned char col, unsigned char row, unsigned char w, unsigned char h ){
  unsigned int i,k,data;
  
 //clipArea( col, row, w, h);
  
  for (i=0;i< (w*h);i++){

      data= getFlash( img, i);
              
      Wire.beginTransmission(SlaveAddress);
      Wire.send(GOFi2cOLED_Data_Mode);            // data mode

        Wire.send( ~data );
      Wire.endTransmission();
      
  }
  
}

void loop()
{
    uint8_t i;
    for(i = 0; i < 16; i++)
      M[i] = 0;
    M[16]=255;
    printM();
  
     numero =random(7); 
  indice=0;
  next_number=random(7);
  load(numero, indice);
  
  x=3;
  y=3;

  
  printString( "PRESS",0,16);
  printString( "ANY",3,32);
  printString( "BUTTON",2,48);
  oled.cursorTo(0,0);
  int f=0;
  while(digitalRead(1)==LOW)
  {
    drawImage( button, 0,0, 128, 8 );
    //delay(180);
    //oled.drawImage( button, f++,0, 64, 8 );
    //if(f==64)f=0;
    }
  num_pza=0;  
  oled.clear();
  while(set(x,y) ) //{ printf("FINDEL JUEGO \n"); return 0; }
  {num_pza++;
       char pzas[8];
   sprintf(pzas,"%d",num_pza);
  printString( pzas,0,0);
  char new_pza[1];
  new_pza[0]=91+next_number;
  //printString( "NEXT",2,0);
  printString( new_pza,4,0);
    do
    {
      printM();
      i=5;
      while(i--)
      {
          if(digitalRead(1))
          {
            unset(y);   
            rotar();
            printM();
          }
          if(digitalRead(3))
          {
            unset(y);   
            left();
            printM();
          } 
          if(digitalRead(4))
          {
            unset(y);   
            right();
            printM();
          }   
       delay(60);
      } 
      unset(y);
    }while(down());   
    delete_row();
    numero = next_number;
    next_number=random(7);
    indice=0;
    x=3;
    y=3;
    load(numero, indice);
  }
  
} 
